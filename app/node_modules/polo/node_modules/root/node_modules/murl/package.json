{
  "name": "murl",
  "version": "0.4.1",
  "dependencies": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/murl"
  },
  "description": "murl is fast url pattern matching and replacing",
  "keywords": [
    "url",
    "routing",
    "pattern",
    "matching",
    "match",
    "replace"
  ],
  "author": {
    "name": "Mathias Buus Madsen",
    "email": "mathiasbuus@gmail.com"
  },
  "scripts": {
    "test": "node tests"
  },
  "readme": "# murl\n\nmurl is fast url pattern matching and replacing.\nIt's avaiable through npm:\n\n\tnpm install murl\n\n## What?\n\nmurl exposes a single function that accepts a pattern\n\n``` js\nvar murl = require('murl');\nvar pattern = murl('/{hello}');\n```\n\nIf you pass a string to the pattern murl will try and match it\n\n``` js\npattern('/world') // -> {hello:'world'}\n```\n\nIf you pass an object it will replace into the pattern\n\n``` js\npattern({hello:'world'}) // -> '/world'\n```\n\n## Patterns\n\nYou can use `?` to specify a group as optional\n\n`murl('/{hello}/{world}?')`: matches both `/a` and `/a/b`\n\nPer default the `{}` groups matches until the next character or `/`.\n\n`murl(/{hello})`: matches `/a` but not `/a/b`\n`murl(/{wid}x{hei})`: matches `/200x200`\n\nUse `*` to match anything\n\n`murl('/*')`: matches `/a`, `/a/b/c` and so on\n\n## Strict mode\n\nPer default murl will disregard trailing `/` from the input string.\nPass `{strict:true}` to disable this.\n\n``` js\nvar pattern = murl('/{hello}', {strict:true});\n\nconsole.log(pattern('/world/')); // returns null\nconsole.log(pattern('/world'))   // return {hello:'world'}\n```\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mafintosh/murl/issues"
  },
  "_id": "murl@0.4.1",
  "dist": {
    "shasum": "7e56500a4f4faad6d89288a607a818400b5a71b9"
  },
  "_from": "murl@0.4.x",
  "_resolved": "https://registry.npmjs.org/murl/-/murl-0.4.1.tgz"
}
