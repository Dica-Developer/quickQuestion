{
  "name": "root",
  "version": "3.0.0",
  "dependencies": {
    "murl": "0.4.x",
    "protein": "0.5.x",
    "network-address": "0.0.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/root"
  },
  "description": "a super lightweight web framework featuring prototype mixin support and routing",
  "keywords": [
    "lightweight",
    "web",
    "routing",
    "mixin",
    "http"
  ],
  "author": {
    "name": "Mathias Buus Madsen",
    "email": "mathiasbuus@gmail.com"
  },
  "scripts": {
    "test": "node tests"
  },
  "readme": "# root\n\nA super lightweight web framework with routing and prototype [mixin](https://github.com/mafintosh/protein) support.\n\nIt's available through npm:\n\n\tnpm install root\n\n[![build status](https://secure.travis-ci.org/mafintosh/root.png)](http://travis-ci.org/mafintosh/root)\n\n## Usage\n\nUsage is simple\n\n``` js\nvar root = require('root');\nvar app = root();\n\napp.get('/', function(request, response) {\n\tresponse.send({hello:'world'});\n});\n\napp.post('/echo', function(request, response) {\n\trequest.on('json', function(body) {\n\t\tresponse.send(body);\n\t});\n});\n\napp.listen(8080);\n```\n\nYou can extend the request and response with your own methods\n\n``` js\napp.use('response.time', function() {\n\tthis.send({time:this.request.time});\n});\napp.use('request.time', {getter:true}, function() {\n\treturn Date.now();\n});\n\napp.get(function(request, response) {\n\tresponse.time();\n});\n```\n\n## Routing\n\nRouting is done using [murl](https://github.com/mafintosh/murl).\nUse the `get`, `post`, `put`, `del`, `patch` or `options` method to specify the HTTP method you want to route\n\n``` js\napp.get('/hello/{world}', function(request, response) {\n\tresponse.send({world:request.params.world});\n});\napp.get('/test', function(request, response, next) {\n\t// call next to call the next matching route\n\tnext();\n});\napp.get('/test', function(request, response) {\n\tresponse.send('ok');\n});\n```\n\n## URL normalization\n\nBefore routing an incoming url it is first decoded and normalized\n\n* `/../../` ⇨ `/`\n* `/foo/bar/../baz` ⇨ `/foo/baz`\n* `/foo%20bar` ⇨ `/foo bar`\n* `/foo%2fbar` ⇨ `/foo/bar`\n\nThis basicly means that you don't need to worry about `/..` attacks when serving files or similar.\n\n## Error handling\n\nYou can specify an error handler for a specific error code by using the `error` function\n\n``` js\napp.get('/foo', function(request, response) {\n\tresponse.error(400, 'bad request man');\n});\n\napp.error(404, function(request, response, opts) {\n\t// opts contains .message which is the message passed to response.error\n\t// and .stack if an error was passed\n\tresponse.send({error:'could not find route'});\n});\napp.error(function(request, response, opts) {\n\tresponse.send({error:'catch all other errors'});\n});\n```\n\n## Using sub apps\n\nRoute requests through an sub app by using `app.route`\n\n``` js\nvar mobileApp = root();\nvar myApp = root();\n...\nmyApp.all('/m/*', function(request, response, next) {\n\t// all routes starting with /m should route through our mobile app as well\n\tmobileApp.route(request, response, next);\n});\n```\n\nAs a shortcut you can just pass the app directly\n\n``` js\nmyApp.all('/m/*', mobileApp);\n```\n\nThis allows you to easily split up your application into seperate parts\nand mount them all on one server\n\n## Full API\n\n### Response\n\n* `response.send(json)` will send back json.\n* `response.send(string)` will send back html (if no Content-Type has been set).\n* `response.error(statusCode, messageOrError)` send back an error\n* `response.redirect(url)` send a http redirect\n\n### Request\n\n* `request.on('json', listener)` will buffer and parse the body as JSON.\n* `request.on('form', listener)` will buffer and parse the body as a url encoded form\n* `request.on('body', listener)` will buffer the body as a string\n* `request.query` contains the parsed querystring from the url\n\n### App\n\n* `app.use(methodName, options, fn)` extend the request or response with a new prototype method\n* `app.(get|put|post|del|options|patch)(pattern, fn)` add a route for a http method\n* `app.all(pattern, fn)` route all methods\n* `app.route(request, response, callback)` route a request or response from another app\n* `app.error(statusCode, fn)` add an error handler. use `4xx` to match all 400 errors etc.\n* `app.on('route', listener)` emitted everytime a request is being routed\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mafintosh/root/issues"
  },
  "_id": "root@3.0.0",
  "dist": {
    "shasum": "12f4016c24be1181022dc940c2f9e5535cb0f97a"
  },
  "_from": "root@^3.0.0",
  "_resolved": "https://registry.npmjs.org/root/-/root-3.0.0.tgz"
}
